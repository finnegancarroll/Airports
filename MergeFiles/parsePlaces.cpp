//goals of this program
//1. to read in "places2k.txt"
//2. to parse "places2k.txt"
//3. use user input (2 args, name of place and 2-letter state abbreviation)
//and find a full place, name, state, latitude, longitude using places2k.txt
//4. output the findings

// implementation notes
//struct airport will contain airport info
//trieNode will contain an airport, next trieNodes, and bool determining
//whether or not it can be considered one end of the trieTree search
//the tree of trieNodes will be called "airports", as it will contain multiple
//trieNodes that each contain an airport

//structs needed
//airport
//trieNode

//input output
#include <iostream>
//file reading
#include <fstream>
#include <string>

using namespace std;

//datatype definitions
struct airport{  
  char* abbreviation; //1-2 United States Postal Service State Abbreviation
  char* processingFIPScode; //3-4 State Federal Information Processing Standard (FIPS) code  
  char* placeFIPScode; //5-9 Place FIPS Code
  
  char* name; //10-73 Name
  float longitude; //144-153 Latitude (decimal degrees)
  char* longOrientation; //First character is blank or "-" denoting North or South latitude respectively
  
  float latitude;// 154-164 Longitude (decimal degrees)
  char* latOrientation;//First character is blank or "-" denoting East or West longitude respectively
 
  //unused statistics
  //74-82 Total Population (2000)
  //83-91 Total Housing Units (2000)
  //92-105 Land Area (square meters) -Created for statistical purposes only.
  //106-119 Water Area(square meters) -Created for statistical purposes only.
  //120-131 Land Area (square miles) -Created for statistical purposes only.
  //132-143 Water Area (square miles) -Created for statistical purposes only.
};

//function definitions
void readFile(string filename);//read in file with name filename
airport parseFile(string line);//turn line generated by readFile into a trie of airports
//note: change the return type later to a trie of airports

//airport findAirport(airport query1, airport query2, trie trieofairports)
//finds an airport based off of the user's 2 queried args

void printAirport(airport printThis); //helper function, outputs airport info

int main () {
  string filename = "places.txt";
  readFile(filename);
  return 0;
}

void readFile(string filename)
{
  string line;
  ifstream myfile (filename);
  if (myfile.is_open())
    {
      while ( getline (myfile,line) )
        {
          cout << "original line:" << endl << endl;
          cout << line << '\n';

          cout << endl << "parsed line:" << endl;
          parseFile(line);
        }
      myfile.close();
    }

  else
    cout << "Unable to open file" << endl;  
}

airport parseFile(string line)
{
  airport returnThis;

  //1-2 state abbreviation
  string str ="";  
  for(int i=0; i<2; i++)
    str += line[i];

  //returnThis.abbreviation = str.c_str();
  
  returnThis.abbreviation = const_cast<char*>(str.c_str());

  //3-4 processing FIPS code
  string str2 ="";
  for(int i=2; i<4; i++)
    str2 += line[i];

  returnThis.processingFIPScode = const_cast<char*>(str2.c_str());
  
  //5-9 Place FIPS Code
  string str3 ="";
  for(int i=4; i<9; i++)
    str3 += line[i];

  returnThis.placeFIPScode = const_cast<char*>(str3.c_str());
  
  //10-73 Name
  string str4 ="";
  for(int i=9; i<73; i++)
    str4 += line[i];

  returnThis.name = const_cast<char*>(str4.c_str());
  
  //144-153 Latitude (decimal degrees)
  //First character is blank or "-" denoting North or South latitude respectively  
  string orientation = " "; //for some reason setting orientation to char instead of string and taking the
  //first character of the string causes memory problems when using the & operator. no idea why.
  if(line[143] == ' ')
    orientation = "N"; //north
  else if(line[143] == '-')
    orientation = "S"; // south
  else
    orientation = "X"; //information not available
  returnThis.latOrientation = &(orientation[0]);

  string str5 ="";
  for(int i=144; i<153; i++)
    str5 += line[i];
  returnThis.latitude = stof(str5);

  // 154-164 Longitude (decimal degrees)
  //First character is blank or "-" denoting East or West longitude respectively
  string orientation2 = " ";
  if(line[153] == ' ')
    //returnThis.longOrientation = 'E';
        orientation2 = "E"; //east
  else if(line[153] == '-')
    orientation2 = "W"; //west
  else
    orientation2 = "X"; //information not available
  returnThis.longOrientation = &(orientation2[0]);

  string str6 ="";
  for(int i=154; i<164; i++)
    str6 += line[i];
  returnThis.longitude = stof(str6);

  printAirport(returnThis);

  return returnThis;
}

void printAirport(airport printThis)
{
  cout << endl;
  cout << "Airport Info" << endl;
  
  cout << "State abbreviation: ";
  printf(printThis.abbreviation);
  cout << endl;  

  cout << "Processing FIPS Code: ";
  printf(printThis.processingFIPScode);
  cout << endl;

  cout << "Place FIPS Code: ";
  printf(printThis.placeFIPScode);
  cout << endl;

  cout << "Name: ";
  printf(printThis.name);
  cout << endl;

  cout << "Latitude Orientation: ";
  printf(printThis.latOrientation);
  cout << endl;

  cout << "Latitude Value: ";
  cout << printThis.latitude;
  cout << endl;

  cout << "Longitude Orientation: ";
  printf(printThis.longOrientation);
  cout << endl;

  cout << "Longitude Value: ";
  cout << printThis.longitude;
  cout << endl;

  cout << endl;  
}
